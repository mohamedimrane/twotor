// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: twoot.sql

package data

import (
	"context"
)

const createTwoot = `-- name: CreateTwoot :one
INSERT INTO twoots ( contents, user_ID )
VALUES ( ?, ? )
RETURNING id, contents, user_id
`

type CreateTwootParams struct {
	Contents string
	UserID   int64
}

func (q *Queries) CreateTwoot(ctx context.Context, arg CreateTwootParams) (Twoot, error) {
	row := q.db.QueryRowContext(ctx, createTwoot, arg.Contents, arg.UserID)
	var i Twoot
	err := row.Scan(&i.ID, &i.Contents, &i.UserID)
	return i, err
}

const getTwootById = `-- name: GetTwootById :one
SELECT twoots.id, twoots.contents, twoots.user_id, users.id, users.username, users.email, users.password, users.bio, users.display_name FROM twoots
INNER JOIN users ON twoots.user_ID = users.ID
WHERE users.ID = ? LIMIT 1
`

type GetTwootByIdRow struct {
	Twoot Twoot
	User  User
}

func (q *Queries) GetTwootById(ctx context.Context, id int64) (GetTwootByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getTwootById, id)
	var i GetTwootByIdRow
	err := row.Scan(
		&i.Twoot.ID,
		&i.Twoot.Contents,
		&i.Twoot.UserID,
		&i.User.ID,
		&i.User.Username,
		&i.User.Email,
		&i.User.Password,
		&i.User.Bio,
		&i.User.DisplayName,
	)
	return i, err
}

const listTwoots = `-- name: ListTwoots :many
SELECT twoots.id, twoots.contents, twoots.user_id, users.id, users.username, users.email, users.password, users.bio, users.display_name FROM twoots
INNER JOIN users ON twoots.user_ID = users.ID
`

type ListTwootsRow struct {
	Twoot Twoot
	User  User
}

func (q *Queries) ListTwoots(ctx context.Context) ([]ListTwootsRow, error) {
	rows, err := q.db.QueryContext(ctx, listTwoots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTwootsRow
	for rows.Next() {
		var i ListTwootsRow
		if err := rows.Scan(
			&i.Twoot.ID,
			&i.Twoot.Contents,
			&i.Twoot.UserID,
			&i.User.ID,
			&i.User.Username,
			&i.User.Email,
			&i.User.Password,
			&i.User.Bio,
			&i.User.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
