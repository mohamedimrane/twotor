// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: twoot.sql

package data

import (
	"context"
)

const createTwoot = `-- name: CreateTwoot :one
INSERT INTO twoots ( contents )
VALUES ( ? )
RETURNING id, contents
`

func (q *Queries) CreateTwoot(ctx context.Context, contents string) (Twoot, error) {
	row := q.db.QueryRowContext(ctx, createTwoot, contents)
	var i Twoot
	err := row.Scan(&i.ID, &i.Contents)
	return i, err
}

const getTwootById = `-- name: GetTwootById :one
SELECT id, contents FROM twoots
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTwootById(ctx context.Context, id int64) (Twoot, error) {
	row := q.db.QueryRowContext(ctx, getTwootById, id)
	var i Twoot
	err := row.Scan(&i.ID, &i.Contents)
	return i, err
}

const listTwoots = `-- name: ListTwoots :many
SELECT id, contents FROM twoots
`

func (q *Queries) ListTwoots(ctx context.Context) ([]Twoot, error) {
	rows, err := q.db.QueryContext(ctx, listTwoots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Twoot
	for rows.Next() {
		var i Twoot
		if err := rows.Scan(&i.ID, &i.Contents); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
